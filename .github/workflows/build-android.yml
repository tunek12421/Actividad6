name: Build Android APK

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 35
        build-tools: 35.0.0
        cmake-version: 3.22.1

    - name: Accept Android SDK Licenses
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true

    - name: Install dependencies
      run: |
        npm ci
        echo "Dependencies installed successfully"

    - name: Verify versions
      run: |
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Java version: $(java -version)"
        echo "Android SDK: $ANDROID_HOME"
        npx cap --version || echo "Capacitor CLI not available yet"

    - name: Build web assets
      run: |
        npm run build
        echo "Web build completed"
        ls -la dist/

    - name: Initialize Capacitor (if needed)
      run: |
        # Check if capacitor is properly initialized
        if [ ! -f "capacitor.config.ts" ]; then
          echo "Capacitor config not found, initializing..."
          npx cap init
        fi

    - name: Add Android platform (if needed)
      run: |
        # Add Android platform if it doesn't exist or is corrupted
        if [ ! -d "android" ] || [ ! -f "android/app/build.gradle" ]; then
          echo "Adding Android platform..."
          npx cap add android
        else
          echo "Android platform already exists"
        fi

    - name: Sync Capacitor
      run: |
        npx cap sync android --deployment
        echo "Capacitor sync completed"

    - name: Make gradlew executable
      run: |
        chmod +x android/gradlew
        echo "Gradlew made executable"

    - name: Clean Android project
      run: |
        cd android
        ./gradlew clean --stacktrace
        echo "Android project cleaned"

    - name: Check Android project structure
      run: |
        echo "Android directory contents:"
        ls -la android/
        echo "App directory contents:"
        ls -la android/app/
        echo "Gradle files:"
        ls -la android/*.gradle android/app/*.gradle

    - name: Build Android APK (Debug)
      run: |
        cd android
        ./gradlew assembleDebug \
          --stacktrace \
          --info \
          --no-daemon \
          -Dorg.gradle.jvmargs="-Xmx2048m" \
          -Dorg.gradle.parallel=false
        echo "Debug APK build completed"

    - name: Verify Debug APK
      run: |
        if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "Debug APK created successfully"
          ls -la android/app/build/outputs/apk/debug/
        else
          echo "Debug APK not found, checking alternatives:"
          find android/app/build -name "*.apk" -type f
        fi

    - name: Build Android APK (Release)
      run: |
        cd android
        ./gradlew assembleRelease \
          --stacktrace \
          --info \
          --no-daemon \
          -Dorg.gradle.jvmargs="-Xmx2048m" \
          -Dorg.gradle.parallel=false
        echo "Release APK build completed"
      continue-on-error: true

    - name: Verify Release APK
      run: |
        if [ -f "android/app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          echo "Release APK created successfully"
          ls -la android/app/build/outputs/apk/release/
        else
          echo "Release APK not found, checking alternatives:"
          find android/app/build -name "*.apk" -type f
        fi

    - name: List all APK files
      run: |
        echo "All APK files found:"
        find android -name "*.apk" -type f -exec ls -la {} \;

    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: books-app-debug-${{ github.run_number }}
        path: |
          android/app/build/outputs/apk/debug/*.apk
          android/app/build/outputs/apk/**/debug/*.apk
        retention-days: 30
        if-no-files-found: warn

    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: books-app-release-${{ github.run_number }}
        path: |
          android/app/build/outputs/apk/release/*.apk
          android/app/build/outputs/apk/**/release/*.apk
        retention-days: 30
        if-no-files-found: warn

    - name: Upload All APKs (Fallback)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: books-app-all-apks-${{ github.run_number }}
        path: android/**/*.apk
        retention-days: 30
        if-no-files-found: ignore

    - name: Build Summary
      if: always()
      run: |
        echo "## 📱 Android Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:**" >> $GITHUB_STEP_SUMMARY
        echo "- Node.js: $(node --version)" >> $GITHUB_STEP_SUMMARY
        echo "- Java: $(java -version 2>&1 | head -1)" >> $GITHUB_STEP_SUMMARY
        echo "- Android SDK: $ANDROID_HOME" >> $GITHUB_STEP_SUMMARY
        echo "- Build: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "**APK Status:**" >> $GITHUB_STEP_SUMMARY
        if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
          DEBUG_SIZE=$(stat -c%s android/app/build/outputs/apk/debug/app-debug.apk)
          echo "- ✅ Debug APK: ${DEBUG_SIZE} bytes" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Debug APK: Not found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "android/app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          RELEASE_SIZE=$(stat -c%s android/app/build/outputs/apk/release/app-release-unsigned.apk)
          echo "- ✅ Release APK: ${RELEASE_SIZE} bytes" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Release APK: Not found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        APK_COUNT=$(find android -name "*.apk" -type f | wc -l)
        echo "**Total APK files generated:** $APK_COUNT" >> $GITHUB_STEP_SUMMARY

    - name: Create Release (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          android/app/build/outputs/apk/debug/*.apk
          android/app/build/outputs/apk/release/*.apk
        generate_release_notes: true
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}